package com.feedback.service.impl;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

import com.feedback.exception.BusinessException;
import com.feedback.dao.FeedbackDAO;
import com.feedback.model.Feedback;
import com.feedback.service.FeedbackService;

@Service
public class FeedbackServiceImpl implements FeedbackService{
	
	@Autowired
	private FeedbackDAO dao;

	@Override
	public Feedback generateFeedback(Feedback feedback) {
		
		return dao.save(feedback);
	}
	
	@Override
	public Feedback updateFeedback(Feedback feedback,int id) throws BusinessException{
		Optional<Feedback> feedbackPresent=dao.findById(id);
		if(!feedbackPresent.isPresent()) {
			throw new BusinessException("No Feedback details present for id "+id);
		}
		feedback.setId(id);
		return dao.save(feedback);
	}

	@Override
	public Feedback getFeedbackById(int id) throws BusinessException{
		
		if(id<=0) {
			throw new BusinessException("Id "+id +" is invalid");
		}
		Feedback feedback=null;
		try {
		feedback=dao.findById(id).get();
		}catch(NoSuchElementException e) {
			throw new BusinessException("No Feedback details found for id "+id);
		}
		return feedback;
	}

	@Override
	public List<Feedback> getAllFeedbacks() {
		
		return dao.findAll();
	}

	@Override
	public Feedback deleteFeedbackById(int id) throws BusinessException{

		if(id<=0) {
			throw new BusinessException("Id "+id +" is invalid");
		}
		try {
			dao.deleteById(id);;
		}catch(EmptyResultDataAccessException e) {
			throw new BusinessException("No Feedback details found for id "+id);
		}
		return null;
	}

	@Override
	public List<Feedback> getFeedbackByRatings(float ratings) {
//		if(ratings<0 && ratings>5) {
//			throw new BusinessException("Ratings "+ratings +" is invalid.Ratings should be between 0-5");
//		}
//		Feedback feedback=null;
//		try {
//		feedback=(Feedback) dao.findByRatings(ratings);
//		}catch(ClassCastException e) {
//			throw new BusinessException("No Feedback details found for rating "+ratings);
//		}
//		return (List<Feedback>) feedback;
		return dao.findByRatings(ratings);
	}

	@Override
	public List<Feedback> getFeedbackByCity(String city) throws BusinessException{
		if(city==null) {
			throw new BusinessException("The field "+city +" can't be empty");
		}
		Feedback feedback=null;
		try {
		feedback=(Feedback) dao.findByCity(city);
		}catch(ClassCastException e) {
			throw new BusinessException("No Feedback details found for the city "+city);
		}
		return (List<Feedback>) feedback;
	}

	@Override
	public List<Feedback> getFeedbackByFeedback(String feedback) throws BusinessException{
		if(feedback==null) {
			throw new BusinessException("The field "+feedback +" can't be empty");
		}
		Feedback feedbacks=null;
		try {
		feedbacks=(Feedback) dao.findByFeedback(feedback);
		}catch(ClassCastException e) {
			throw new BusinessException("No Feedback details found for the feedback "+feedback);
		}
		return (List<Feedback>) feedbacks;
	}
	

}
