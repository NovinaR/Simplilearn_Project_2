package com.feedback.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.feedback.exception.BusinessException;
import com.feedback.model.Feedback;
import com.feedback.service.FeedbackService;

@RestController
public class FeedbackController {
	
	@Autowired
	private FeedbackService service;
	
	private MultiValueMap<String, String> map;

	@PostMapping("/generate")
	public Feedback generateFeedback(@RequestBody Feedback feedback) {
		
		return service.generateFeedback(feedback);
	}
	
//	@PutMapping("/students/{id}")
//	public ResponseEntity<Object> updateStudent(@RequestBody Student student, @PathVariable long id) {
//
//		Optional<Student> studentOptional = studentRepository.findById(id);
//
//		if (!studentOptional.isPresent())
//			return ResponseEntity.notFound().build();
//
//		student.setId(id);
//		
//		studentRepository.save(student);
//
//		return ResponseEntity.noContent().build();
//	}

	@PutMapping("/update/{id}")
	public ResponseE updateFeedback(@PathVariable("id") Feedback id, @RequestBody Feedback feedback) {
		boolean exists=exist
		if(service.updateFeedback(id)==null) {
			thr
		}
		return service.updateFeedback(feedback);
	}

	@GetMapping("/get/{id}")
	public ResponseEntity<Feedback> getFeedbackById(@PathVariable("id") int id) {
		
		try {
			return new ResponseEntity<Feedback>(service.getFeedbackById(id),HttpStatus.OK);
		} catch (BusinessException e) {
			map=new LinkedMultiValueMap<>();
			map.add("message", e.getMessage());
			return new ResponseEntity<Feedback>(null,map, HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/feedbacks")
	public List<Feedback> getAllFeedbacks() {
		
		return service.getAllFeedbacks();
	}


	@DeleteMapping("/delete/{id}")
	public ResponseEntity<Feedback> deleteFeedbackById(@PathVariable("id") int id) {
		try {
			service.deleteFeedbackById(id);
		} catch (BusinessException e) {
			map=new LinkedMultiValueMap<>();
			map.add("message", e.getMessage());
			return new ResponseEntity<Feedback>(null,map, HttpStatus.NOT_FOUND);
		}
		return null;
		
	}

}
